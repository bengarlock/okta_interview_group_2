{"ast":null,"code":"var _jsxFileName = \"/Users/bengarlock/Desktop/okta-interview-prep/src/Components/Pages/Profile.js\",\n    _temp;\n\nimport React from 'react';\nimport { withOktaAuth } from \"@okta/okta-react\";\nimport SignInWidget from \"../Widgets/SignInWidget\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default withOktaAuth((_temp = class Profile extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: null,\n      groups: null,\n      administrator: null\n    };\n\n    this.componentDidMount = () => {\n      this.fetchUser();\n    };\n\n    this.fetchUser = () => {\n      const packet = {\n        cache: \"no-cache\",\n        credentials: \"include\",\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        }\n      };\n      fetch(\"https://dev-49794790.okta.com/api/v1/users/me\", packet).then(res => res.json()).then(user => this.setState({\n        currentUser: user\n      }, () => this.fetchGroups()));\n    };\n\n    this.fetchGroups = () => {\n      console.log(`https://dev-49794790.okta.com/api/v1/users/${this.state.currentUser.id}/groups`);\n      const packet = {\n        cache: \"no-cache\",\n        credentials: \"include\",\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        }\n      };\n      fetch(`https://dev-49794790.okta.com/api/v1/users/${this.state.currentUser.id}/groups`, packet).then(res => res.json()).then(groups => this.checkGroupForAdmin(groups));\n    };\n\n    this.checkGroupForAdmin = groups => {\n      console.log(groups.errorCode); // let groupArray = groups.map(group => group.profile.name)\n      // console.log(groupArray)\n      // if (groupArray.includes(\"Administrators\")) {\n      //     this.setState({\n      //         administrator: true,\n      //     })\n      // } else {\n      //     this.setState({\n      //         administrator: false\n      //     })\n      // }\n    };\n\n    this.renderUserInfo = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Name: \", this.props.authState.idToken.claims.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"E-Mail \", this.props.authState.idToken.claims.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(SignInWidget, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.props.authState.idToken ? this.renderUserInfo() : null, this.state.administrator ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"administrator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 45\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n}, _temp));","map":{"version":3,"sources":["/Users/bengarlock/Desktop/okta-interview-prep/src/Components/Pages/Profile.js"],"names":["React","withOktaAuth","SignInWidget","Profile","Component","state","currentUser","groups","administrator","componentDidMount","fetchUser","packet","cache","credentials","method","headers","fetch","then","res","json","user","setState","fetchGroups","console","log","id","checkGroupForAdmin","errorCode","renderUserInfo","props","authState","idToken","claims","name","email","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withOktaAuth } from \"@okta/okta-react\";\nimport SignInWidget from \"../Widgets/SignInWidget\";\n\nexport default withOktaAuth(class Profile extends React.Component{\n\n    state = {\n        currentUser: null,\n        groups: null,\n        administrator: null,\n    }\n\n    componentDidMount = () => {\n        this.fetchUser()\n    }\n\n    fetchUser = () => {\n        const packet = {\n            cache: \"no-cache\",\n            credentials: \"include\",\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n            },\n        }\n        fetch(\"https://dev-49794790.okta.com/api/v1/users/me\", packet)\n            .then(res => res.json())\n            .then(user => this.setState(\n                {\n                    currentUser: user\n                }, () => this.fetchGroups()))\n    }\n\n    fetchGroups = () => {\n        console.log(`https://dev-49794790.okta.com/api/v1/users/${this.state.currentUser.id}/groups`)\n        const packet = {\n            cache: \"no-cache\",\n            credentials: \"include\",\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n            },\n        }\n\n        fetch(`https://dev-49794790.okta.com/api/v1/users/${this.state.currentUser.id}/groups`, packet)\n            .then(res => res.json())\n            .then(groups => this.checkGroupForAdmin(groups))\n    }\n\n    checkGroupForAdmin = (groups) => {\n        console.log(groups.errorCode)\n        // let groupArray = groups.map(group => group.profile.name)\n        // console.log(groupArray)\n        // if (groupArray.includes(\"Administrators\")) {\n        //     this.setState({\n        //         administrator: true,\n        //     })\n        // } else {\n        //     this.setState({\n        //         administrator: false\n        //     })\n        // }\n    }\n\n\n    renderUserInfo = () => {\n        return (\n            <div>\n                <h3>Your Profile</h3>\n                <div>Name: {this.props.authState.idToken.claims.name}</div>\n                <div>E-Mail {this.props.authState.idToken.claims.email}</div>\n                <SignInWidget />\n            </div>\n        )\n    }\n\n    render() {\n\n        return(\n\n            <div>\n                {this.props.authState.idToken ? this.renderUserInfo() : null}\n                {this.state.administrator ? <div>administrator</div> : null}\n            </div>\n        )\n    }\n})\n"]},"metadata":{},"sourceType":"module"}